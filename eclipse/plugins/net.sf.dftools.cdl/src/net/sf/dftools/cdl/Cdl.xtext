grammar net.sf.dftools.cdl.Cdl with org.eclipse.xtext.common.Terminals

generate cdl "http://www.sf.net/dftools/cdl/Cdl"

///////////////////////////////////////////////////////////////////////////////
// top-level entity
///////////////////////////////////////////////////////////////////////////////

Module:
	('package' package=QualifiedName ';')?
	(imports += Import)*
	
	( ('component' name=ID component=Component)
	| ('library' name=ID library=Library)
	);
	
Import: 'import' importedNamespace=QualifiedNameWithWildCard ';';

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

	
///////////////////////////////////////////////////////////////////////////////
// Entities
///////////////////////////////////////////////////////////////////////////////


Library:{Library} 
	 '{'
		(types += TypeDecl)*
	'}';

Component:{Component}
	 '(' ')' '{'	
		
		(operator=Operator)?
		
		((interfaces += Interface)
		 |(memories += Memory))*

	'}';

///////////////////////////////////////////////////////////////////////////////
// Component classes
///////////////////////////////////////////////////////////////////////////////

Operator:
	'operator' core=Core;

Interface: 
	'interface' core=Core;
	
Memory: 
	'memory' core=Core;
	
Core: type=[Class|QualifiedName] name=ID '{'
		(fields+=Field)*
	'}';

//Field: attribute=[Attribute|QualifiedName];
Field: attribute=[Attribute] '=' value=Value ';';

Value: Integer | Identifier | LiteralString;

LiteralString: value=STRING;

///////////////////////////////////////////////////////////////////////////////
// Library classes
///////////////////////////////////////////////////////////////////////////////

Class:
	'class' name=ID  '{'
		((attributes+=Attribute))*
	'}';

Attribute: type=Type name=ID ';';

Enum :
	'enum' name=ID '{' 
		(literals += Literal) 
		(',' (literals += Literal))*
	 '}';

///////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////

TypeDecl: Class | Enum;

Type: TypeBool | TypeInt | TypeLong | TypeString | TypeRef;

TypeRef: type=[TypeDecl];

TypeBool: name='bool';

TypeInt: name='int';

TypeLong: name='long';

TypeString: name='String';

///////////////////////////////////////////////////////////////////////////////
// Litterals
///////////////////////////////////////////////////////////////////////////////

Literal: Integer | Identifier;

Integer: index=INT;

Identifier: name=ID;
