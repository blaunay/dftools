grammar net.sf.dftools.cdl.Cdl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate cdl "http://www.sf.net/dftools/cdl/Cdl"

///////////////////////////////////////////////////////////////////////////////
// top-level entity
///////////////////////////////////////////////////////////////////////////////
AstModule:
	('package' package=QualifiedName ';')?
	(imports+=Import)*
	((is='component' name=ID component=AstComponent)
	| (is='library' name=ID library=AstLibrary));

Import:
	'import' importedNamespace=QualifiedNameWithWildCard ';';

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

	///////////////////////////////////////////////////////////////////////////////
// Entities
///////////////////////////////////////////////////////////////////////////////
AstLibrary:
	{AstLibrary}
	'{'
	(types+=AstDecl)*
	'}';

AstComponent:
	{AstComponent}
	'(' ')' '{'
	(operator=AstOperator)?
	((interfaces+=AstInterface)
	| (memories+=AstMemory))*
	'}';

	///////////////////////////////////////////////////////////////////////////////
// Component classes
///////////////////////////////////////////////////////////////////////////////
AstOperator:
	'operator' core=AstCore;

AstInterface:
	'interface' core=AstCore;

AstMemory:
	'memory' core=AstCore;

AstCore:
	type=[AstClass|QualifiedName] name=ID '{'
	(fields+=AstField)*
	'}';

AstField:
	domain=AstDomain '=' value=AstExpression ';';

AstDomain:
	left=[AstAttribute] ('.' right=AstDomain)?;

	///////////////////////////////////////////////////////////////////////////////
// Library classes
///////////////////////////////////////////////////////////////////////////////
AstDecl:
	AstClass | AstEnum;

AstClass:
	is='class' name=ID '{'
	((attributes+=AstAttribute))*
	'}';

AstAttribute:
	type=AstType name=ID ('=' default=AstExpression)? ';';

AstEnum:
	is='enum' name=ID '{'
	(constants+=AstEnumLiteral)
	(',' (constants+=AstEnumLiteral))*
	'}';

AstEnumLiteral returns AstSymbol:
	{EnumLiteral} name=ID;

	///////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////
AstType:
	AstBasicType | AstDeclType;

AstDeclType:
	typeRef=[AstDecl];

AstBasicType:
	{AstBoolType} name='bool' |
	{AstIntegerType} name='int' |
	{AstLongType} name='long' |
	{AstFloatType} name='float' |
	{AstDoubleType} name='double' |
	{AstStringType} name='String';

	///////////////////////////////////////////////////////////////////////////////
// Litterals
///////////////////////////////////////////////////////////////////////////////
terminal BOOL returns ecore::EBoolean:
	'true' | 'false';

terminal DOUBLE returns ecore::EDouble:
	('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	| '.' ('0'..'9')+ (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	| ('0'..'9')+ ('e' | 'E') ('+' | '-')? ('0'..'9')+;

	///////////////////////////////////////////////////////////////////////////////
// expressions
///////////////////////////////////////////////////////////////////////////////
AstExpression:
	AstExpressionEquality;

AstExpressionEquality returns AstExpression:
	AstExpressionRelational ({AstExpressionBinary.left=current} operator=('==' | '!=') right=AstExpressionRelational)*;

AstExpressionRelational returns AstExpression:
	AstExpressionAddition ({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=')
	right=AstExpressionAddition)*;

AstExpressionAddition returns AstExpression:
	AstExpressionMultiplication ({AstExpressionBinary.left=current} operator=('+' | '-')
	right=AstExpressionMultiplication)*;

AstExpressionMultiplication returns AstExpression:
	AstExpressionUnary ({AstExpressionBinary.left=current} operator=('*' | '/' | 'mod') right=AstExpressionUnary)*;

AstExpressionUnary returns AstExpression:
	{AstExpressionUnary} operator=( '!'| '-' ) expression=AstExpressionAtomic | AstExpressionAtomic;

AstExpressionAtomic returns AstExpression:
	{AstParenthesis} '(' expression=AstExpression ')' |
	{AstSymbolRef} symbol=[AstSymbol|QualifiedName] |
	{AstDoubleLiteral} value=DOUBLE |
	{AstIntegerLiteral} value=INT |
	{AstStringLiteral} value=STRING |
	{AstBoolLiteral} value=BOOL;

