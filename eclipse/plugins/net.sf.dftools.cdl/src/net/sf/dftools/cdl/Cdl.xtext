grammar net.sf.dftools.cdl.Cdl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate cdl "http://www.sf.net/dftools/cdl/Cdl"

///////////////////////////////////////////////////////////////////////////////
// top-level entity
///////////////////////////////////////////////////////////////////////////////
AstModule:
	('package' package=QualifiedName ';')?
	(imports+=Import)*
	(('component' name=ID component=AstComponent)
	| ('library' name=ID library=AstLibrary));

Import:
	'import' importedNamespace=QualifiedNameWithWildCard ';';

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

	///////////////////////////////////////////////////////////////////////////////
// Entities
///////////////////////////////////////////////////////////////////////////////
AstLibrary:
	{AstLibrary}
	'{'
	(types+=AstDecl)*
	'}';

AstComponent:
	{AstComponent}
	'(' ')' '{'
	(operator=AstOperator)?
	((interfaces+=AstInterface)
	| (memories+=AstMemory))*
	'}';

	///////////////////////////////////////////////////////////////////////////////
// Component classes
///////////////////////////////////////////////////////////////////////////////
AstOperator:
	'operator' core=AstCore;

AstInterface:
	'interface' core=AstCore;

AstMemory:
	'memory' core=AstCore;

AstCore:
	type=[AstClass|QualifiedName] name=ID '{'
	(fields+=AstField)*
	'}';

AstField:
	domain=AstDomain '=' value=AstExpression ';';

AstDomain:
	AstPrimaryDomain ({AstDomainCall.left=current} '.' right=AstPrimaryDomain)*;

AstPrimaryDomain returns AstDomain:
	attribute=[AstAttribute];

	///////////////////////////////////////////////////////////////////////////////
// Library classes
///////////////////////////////////////////////////////////////////////////////
AstDecl:
	AstClass | AstEnum;

AstClass:
	'class' name=ID '{'
	((attributes+=AstAttribute))*
	'}';

AstAttribute:
	type=AstType name=ID ('=' default=AstExpression)? ';';

AstEnum:
	'enum' name=ID '{'
	(constants+=AstEnumLiteral)
	(',' (constants+=AstEnumLiteral))*
	'}';

AstEnumLiteral returns AstSymbol:
	{EnumLiteral} name=ID;

///////////////////////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////////////////////
AstType:
	AstBasicType | AstDeclType;

AstDeclType:
	type=[AstDecl];

AstBasicType:
	name=('bool' | 'int' | 'long' | 'String');

	///////////////////////////////////////////////////////////////////////////////
// Litterals
///////////////////////////////////////////////////////////////////////////////
AstLiteral:
	AstLiteralInteger | AstLiteralString | AstLiteralBool | AstLiteralDouble;

AstLiteralInteger:
	int=INT;

AstLiteralString:
	string=STRING;

AstLiteralBool:
	bool=BOOL;

AstLiteralDouble:
	double=DOUBLE;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false';

terminal DOUBLE returns ecore::EDouble:
	('0'..'9')+ '.' ('0'..'9')* (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	| '.' ('0'..'9')+ (('e' | 'E') ('+' | '-')? ('0'..'9')+)?
	| ('0'..'9')+ ('e' | 'E') ('+' | '-')? ('0'..'9')+;

	///////////////////////////////////////////////////////////////////////////////
// expressions
///////////////////////////////////////////////////////////////////////////////
AstExpression:
	AstExpressionAnd ({AstExpressionBinary.left=current} operator=('||' | 'or') right=AstExpressionAnd)*;

AstExpressionAnd returns AstExpression:
	AstExpressionBitor ({AstExpressionBinary.left=current} operator=('&&' | 'and') right=AstExpressionBitor)*;

AstExpressionBitor returns AstExpression:
	AstExpressionBitxor ({AstExpressionBinary.left=current} operator='|' right=AstExpressionBitxor)*;

AstExpressionBitxor returns AstExpression:
	AstExpressionBitand ({AstExpressionBinary.left=current} operator='^' right=AstExpressionBitand)*;

AstExpressionBitand returns AstExpression:
	AstExpressionEq ({AstExpressionBinary.left=current} operator='&' right=AstExpressionEq)*;

AstExpressionEq returns AstExpression:
	AstExpressionRelational ({AstExpressionBinary.left=current} operator=('=' | '!=') right=AstExpressionRelational)*;

AstExpressionRelational returns AstExpression:
	AstExpressionShift ({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=AstExpressionShift)*;

AstExpressionShift returns AstExpression:
	AstExpressionAdditive ({AstExpressionBinary.left=current} operator=('<<' | '>>') right=AstExpressionAdditive)*;

AstExpressionAdditive returns AstExpression:
	AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=('+' | '-')
	right=AstExpressionMultiplicative)*;

AstExpressionMultiplicative returns AstExpression:
	AstExpressionExp ({AstExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=AstExpressionExp)*;

AstExpressionExp returns AstExpression:
	AstExpressionUnary ({AstExpressionBinary.left=current} operator='**' right=AstExpressionUnary)*;

AstExpressionUnary returns AstExpression:
	{AstExpressionUnary} AstunaryOperator=('~' | '-' | 'not' | '#') expression=AstExpressionPostfix
	| AstExpressionPostfix;

AstExpressionAtomic returns AstExpression:
	{AstSymbolRef} var=[AstSymbol|QualifiedName] |
	{AstLiteralRef} value=AstLiteral;

AstExpressionPostfix returns AstExpression:
	'(' AstExpression ')' |
	AstExpressionAtomic;
