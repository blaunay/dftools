grammar net.sf.dftools.cdl.Cdl with org.eclipse.xtext.common.Terminals

generate cdl "http://www.sf.net/dftools/cdl/Cdl"

///////////////////////////////////////////////////////////////////////////////
// top-level entity
///////////////////////////////////////////////////////////////////////////////

AstEntity: 
	('package' package=QualifiedName ';')?
	(imports += Import)*
	
	(types+=AstType)*
	
	//('component' name=ID '(' ')' component=AstComponent)?;
	;

Import: 'import' importedNamespace=QualifiedNameWithWildCard ';';

QualifiedName:
	ID ('.' ID)*;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

	
///////////////////////////////////////////////////////////////////////////////
// component
///////////////////////////////////////////////////////////////////////////////

/*AstComponent: {AstComponent}
'{'
'}';*/

///////////////////////////////////////////////////////////////////////////////
// classes
///////////////////////////////////////////////////////////////////////////////

AstClass: 
	'class' name=ID  '{'
		((attributes+=AstAttribute)';')*
	'}';
	
AstAttribute: type=[AstType|ID] name=ID;

///////////////////////////////////////////////////////////////////////////////
// types
///////////////////////////////////////////////////////////////////////////////

AstType: AstClass | AstEnum ;

AstTypeRef: AstTypeBool | AstTypeInt | AstTypeLong | AstTypeString;

AstTypeBool: name='bool';

AstTypeInt: name='int';

AstTypeLong: name='long';

AstTypeString: name='String';

AstEnum : 'enum'  name=ID '{' (identifiers += ID) (',' (identifiers += ID)*)? '}';

	
